#!/bin/bash

DB_PATH="./DBMS"
mkdir -p "$DB_PATH"

# Main Menu
main_menu() {
    echo "==============================================="
    echo "        BASH DATABASE MANAGEMENT SYSTEM       "
    echo "==============================================="
    echo "1. Create Database"
    echo "2. List Databases"
    echo "3. Connect To Database"
    echo "4. Drop Database"
    echo "5. Exit"
    echo "==============================================="
    read -p "Choose an option: " choice
    case $choice in
        1) create_database ;;
        2) list_databases ;;
        3) connect_database ;;
        4) drop_database ;;
        5) echo "Goodbye!"; exit ;;
        *) echo "Invalid option"; main_menu ;;
    esac
}

create_database() {
    echo "==============================================="
    echo "              CREATE DATABASE                 "
    echo "==============================================="
    read -p "Enter database name: " dbname
    
    # Validate database name
    if [[ ! "$dbname" =~ ^[a-zA-Z][a-zA-Z0-9_]*$ ]]; then
        echo "Invalid database name. Must start with letter and contain only letters, numbers, and underscores."
        main_menu
        return
    fi
    
    if [ -d "$DB_PATH/$dbname" ]; then
        echo "Database '$dbname' already exists!"
    else
        mkdir "$DB_PATH/$dbname"
        echo "Database '$dbname' created successfully!"
    fi
    main_menu
}

list_databases() {
    echo "==============================================="
    echo "              LIST DATABASES                  "
    echo "==============================================="
    if [ "$(ls "$DB_PATH" 2>/dev/null)" ]; then
        echo "Available databases:"
        echo "-------------------"
        ls "$DB_PATH" 
    else
        echo "No databases found."
    fi
    echo ""
    main_menu
}

drop_database() {
    echo "==============================================="
    echo "               DROP DATABASE                  "
    echo "==============================================="
    read -p "Enter database name to delete: " dbname
    
    if [ -d "$DB_PATH/$dbname" ]; then
        echo "WARNING: This will permanently delete database '$dbname' and all its tables!"
        read -p "Are you sure? (yes/no): " confirm
        if [[ "$confirm" =~ ^[Yy]([Ee][Ss])?$ ]]; then
            rm -r "$DB_PATH/$dbname"
            echo "Database '$dbname' deleted successfully!"
        else
            echo "Deletion cancelled."
        fi
    else
        echo "Database '$dbname' not found!"
    fi
    main_menu
}

connect_database() {
    echo "==============================================="
    echo "             CONNECT TO DATABASE              "
    echo "==============================================="
    read -p "Enter database name: " dbname
    
    if [ -d "$DB_PATH/$dbname" ]; then
        database_menu "$dbname"
    else
        echo "Database '$dbname' not found!"
        main_menu
    fi
}

# Database Menu (after connecting)
database_menu() {
    local dbname=$1
    echo "==============================================="
    echo "        DATABASE: $dbname"
    echo "==============================================="
    echo "1. Create Table"
    echo "2. List Tables"
    echo "3. Drop Table"
    echo "4. Insert into Table"
    echo "5. Select From Table"
    echo "6. Delete From Table"
    echo "7. Update Table"
    echo "8. Back to Main Menu"
    echo "==============================================="
    read -p "Choose an option: " choice
    case $choice in
        1) create_table "$dbname" ;;
        2) list_tables "$dbname" ;;
        3) drop_table "$dbname" ;;
        4) insert_into_table "$dbname" ;;
        5) select_from_table "$dbname" ;;
        6) delete_from_table "$dbname" ;;
        7) update_table "$dbname" ;;
        8) main_menu ;;
        *) echo "Invalid option"; database_menu "$dbname" ;;
    esac
}

create_table() {
    local dbname=$1
    echo "==============================================="
    echo "              CREATE TABLE                    "
    echo "==============================================="
    read -p "Enter table name: " tablename
    
    # Validate table name
    if [[ ! "$tablename" =~ ^[a-zA-Z][a-zA-Z0-9_]*$ ]]; then
        echo "Invalid table name. Must start with letter."
        database_menu "$dbname"
        return
    fi
    
    if [ -f "$DB_PATH/$dbname/$tablename.txt" ]; then
        echo "Table '$tablename' already exists!"
        database_menu "$dbname"
        return
    fi
    
    read -p "Enter number of columns: " num_cols
    
    # Validate number input
    if ! [[ "$num_cols" =~ ^[0-9]+$ ]] || [ "$num_cols" -lt 1 ]; then
        echo "Invalid number of columns!"
        database_menu "$dbname"
        return
    fi
    
    echo ""
    echo "NOTE! The first column will be the PRIMARY KEY by default"
    
    
    # Arrays to store table metadata
    columns=()
    datatypes=()
    primary_key=""
    
    echo ""
    echo "Enter column details:"
    echo "Available data types: int, string"
    echo "-------------------------------------------"
    
    for ((i=1; i<=num_cols; i++)); do
        read -p "Column $i name: " col_name
        
        # Validate column name
        if [[ ! "$col_name" =~ ^[a-zA-Z][a-zA-Z0-9_]*$ ]]; then
            echo "Invalid column name. Must start with letter."
            i=$((i-1))
            continue
        fi
        
        # Check for duplicate column names
        for existing_col in "${columns[@]}"; do
            if [ "$existing_col" = "$col_name" ]; then
                echo "Error: Column name '$col_name' already exists! Please choose a different name."
                i=$((i-1))
                continue 2  # Continue outer loop
            fi
        done
        
        echo "Select data type for '$col_name':"
        echo "1. int"
        echo "2. string" 
        read -p "Choice (1-2): " dtype_choice
        
        case $dtype_choice in
            1) datatype="int" ;;
            2) datatype="string" ;;
            *) echo "Invalid choice, defaulting to string"; datatype="string" ;;
        esac
        
        columns+=("$col_name")
        datatypes+=("$datatype")
        
        echo "Column '$col_name' ($datatype) added."
        echo ""
    done
    
    # Ask for primary key
    echo "The first column '${columns[0]}' will be set as the primary key."
    primary_key="${columns[0]}"
    
    # Create table files
    # Schema file (tablename_schema.txt) - simplified format
    schema_file="$DB_PATH/$dbname/${tablename}_schema.txt"
    for ((i=0; i<${#columns[@]}; i++)); do
        echo "${columns[i]}:${datatypes[i]}" >> "$schema_file"
    done
    
    # Data file (tablename.txt) - just headers
    data_file="$DB_PATH/$dbname/$tablename.txt"
    {
        printf "%s" "${columns[0]}"
        for ((i=1; i<${#columns[@]}; i++)); do
            printf ",%s" "${columns[i]}"
        done
        printf "\n"
    } > "$data_file"
    
    echo ""
    echo "Table '$tablename' created successfully!"
    database_menu "$dbname"
}

# Start the application
main_menu
